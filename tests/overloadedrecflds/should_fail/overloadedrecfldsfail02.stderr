
overloadedrecfldsfail02.hs:11:5:
    No instance for (T a1) {x :: Bool}
      arising from a use of the record selector ‛x’
    The field ‛x’ of ‛T’ cannot be overloaded,
      as its type is existentially quantified
    In the expression: x
    In the expression: x (MkT True) :: Bool
    In an equation for ‛a’: a = x (MkT True) :: Bool

overloadedrecfldsfail02.hs:12:5:
    No instance for U {x :: ...}
      arising from a use of the record selector ‛x’
    The field ‛x’ of ‛U’ cannot be overloaded,
      as its type is universally quantified
    In the expression: x
    In the expression: x (MkU id)
    In an equation for ‛b’: b = x (MkU id)

overloadedrecfldsfail02.hs:13:5:
    No instance for U {y :: ...}
      arising from a use of the record selector ‛y’
    The field ‛y’ of ‛U’ cannot be overloaded,
      as its type is universally quantified
    In the expression: y
    In the expression: y (MkU2 (\ _ -> ()))
    In an equation for ‛c’: c = y (MkU2 (\ _ -> ()))

overloadedrecfldsfail02.hs:14:5:
    No instance for (Int -> Int) {x :: Bool}
      arising from a use of the record selector ‛x’
    The type ‛(->)’ does not have a field ‛x’
    In the expression: x
    In the expression: x ((\ x -> x) :: Int -> Int) :: Bool
    In an equation for ‛d’: d = x ((\ x -> x) :: Int -> Int) :: Bool

overloadedrecfldsfail02.hs:17:5:
    Could not deduce (T a0) {x :: t}
      arising from a use of the record selector ‛x’
    from the context ((T Int) {foo :: t})
      bound by the type signature for e :: (T Int) {foo :: t} => t
      at overloadedrecfldsfail02.hs:16:6-30
    The field ‛x’ of ‛T’ cannot be overloaded,
      as its type is existentially quantified
    The type variable ‛a0’ is ambiguous
    Relevant bindings include
      e :: t (bound at overloadedrecfldsfail02.hs:17:1)
    In the expression: x
    In the expression: x (MkT True)
    In an equation for ‛e’: e = x (MkT True)
